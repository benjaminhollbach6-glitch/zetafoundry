from __future__ import annotations
from jinja2 import Template
import time, uuid
def STAMP(): return time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())
def UUID():  return uuid.uuid4().hex[:12]
HDR_BASH = """#!/data/data/com.termux/files/usr/bin/bash
# GENERATED BY ZETAFOUNDRY • {{ stamp }} • id:{{ uid }}
set -euo pipefail
export LC_ALL=C.UTF-8
"""
HELPERS = r'''
log(){ printf "\033[1;34m[APP]\033[0m %s\n" "$*"; }
ok(){  printf "\033[1;32m[OK]\033[0m %s\n" "$*"; }
err(){ printf "\033[1;31m[ERR]\033[0m %s\n" "$*" >&2; }
ensure(){ [ -d "$1" ] || mkdir -p "$1"; }
'''
SEG_INSTALLER=r'''
APP_NAME="{{ app_name }}"
INSTALL_DIR="${INSTALL_DIR:-$HOME/neon/nx/projects/${APP_NAME}}"
BIN_DIR="$INSTALL_DIR/bin"; APP_DIR="$INSTALL_DIR/app"; LOG_DIR="$INSTALL_DIR/logs"
ensure "$INSTALL_DIR" "$BIN_DIR" "$APP_DIR" "$LOG_DIR"
ok "Installationspfad: $INSTALL_DIR"
'''
SEG_SERVICE=r'''
PREFIX="/data/data/com.termux/files/usr"; SVDIR="$PREFIX/var/service"; SVC="${APP_NAME}"
ensure "$SVDIR/$SVC" "$SVDIR/$SVC/log"
cat >"$SVDIR/$SVC/log/run" <<'SH'
#!/data/data/com.termux/files/usr/bin/sh
exec svlogd -tt "$HOME/neon/nx/projects/{{ app_name }}/logs/runit"
SH
chmod +x "$SVDIR/$SVC/log/run"
cat >"$SVDIR/$SVC/run" <<'SH'
#!/data/data/com.termux/files/usr/bin/sh
export HOME="${HOME:-/data/data/com.termux/files/home}"
exec "$HOME/neon/nx/projects/{{ app_name }}/app/main.sh"
SH
chmod +x "$SVDIR/$SVC/run"; ok "Service vorbereitet: $SVDIR/$SVC"
'''
SEG_HEALTH=r'''
health(){ bash -n "$APP_DIR/main.sh" && ok "bash syntax OK" || { err "bash syntax FAIL"; return 1; } }
'''
SEG_METRICS=r'''
metrics(){ printf 'app_info{app="%s"} 1\n' "$APP_NAME" > "$LOG_DIR/metrics.prom"; ok "Metrics geschrieben" }
'''
SEG_SQLITE=r'''
fts_init(){ pkg install -y sqlite >/dev/null 2>&1 || true; DB="$INSTALL_DIR/data/app.db"; ensure "$(dirname "$DB")"; sqlite3 "$DB" "pragma journal_mode=wal; create table if not exists docs(id integer primary key, title text, content text); create virtual table if not exists docs_fts using fts5(title, content, content='docs', content_rowid='id');"; ok "SQLite/FTS5 init" }
'''
SEG_APP=r'''
cat >"$APP_DIR/main.sh" <<'SH'
#!/data/data/com.termux/files/usr/bin/bash
set -euo pipefail
echo "[{{ app_name }}] @ $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
SH
chmod +x "$APP_DIR/main.sh"
'''
TAIL=r'''
health || exit 2; ok "Fertig: $INSTALL_DIR"
'''
from jinja2 import Template as _T
TPL_BASH=_T(HDR_BASH+HELPERS+"{{ segs }}")
def build_bash(app_name:str,want:dict)->str:
    seg=[SEG_INSTALLER]
    if want.get("service"): seg.append(SEG_SERVICE)
    if want.get("sqlite"): seg.append(SEG_SQLITE)
    if want.get("health"): seg.append(SEG_HEALTH)
    if want.get("metrics"): seg.append(SEG_METRICS)
    seg+=[SEG_APP,TAIL]
    return TPL_BASH.render(stamp=STAMP(),uid=UUID(),segs="\n".join(seg),app_name=app_name)
